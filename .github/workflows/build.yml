name: Build (CMake + vcpkg on Windows & macOS)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up vcpkg
        shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}
        run: |
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            .\vcpkg\bootstrap-vcpkg.bat
          else
            ./vcpkg/bootstrap-vcpkg.sh
          fi

      - name: Cache vcpkg build artifacts
        uses: actions/cache@v3
        with:
          path: |
            vcpkg/buildtrees
            vcpkg/downloads
            vcpkg/packages
            vcpkg_installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install Doxygen
        shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            choco install doxygen.install -y
          else
            brew install doxygen
          fi

      - name: Configure and build  
        shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cmake -B build -S . -G "Visual Studio 17 2022" -A x64 \
              -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" \
              -DVCPKG_TARGET_TRIPLET=x64-windows
            cmake --build build --config Release
          else
            cmake -B build -S . \
              -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            cmake --build build --config Release
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ matrix.os }}
          path: build/
          retention-days: 1

  test:
    needs: build
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ matrix.os }}
          path: build/

      - name: Run tests
        shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}
        run: |
          ctest --test-dir build --output-on-failure --build-config Release
